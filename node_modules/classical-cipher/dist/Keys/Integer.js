"use strict";
var _ = require("lodash");
var InvalidKeyException_1 = require("./InvalidKeyException");
var Integer = (function () {
    function Integer(min, max) {
        if (min === void 0) { min = -Infinity; }
        if (max === void 0) { max = Infinity; }
        this.min = min;
        this.max = max;
    }
    Integer.prototype.getPrimitiveKey = function (inputKey) {
        var potentialValue;
        if (typeof inputKey === "string") {
            potentialValue = parseInt(inputKey);
            if (isNaN(potentialValue)) {
                throw new InvalidKeyException_1.default(inputKey);
            }
        }
        else {
            potentialValue = inputKey;
        }
        if (potentialValue >= this.min && potentialValue <= this.max) {
            return potentialValue;
        }
        else {
            throw new InvalidKeyException_1.default(inputKey, "is out of the keys range");
        }
    };
    Integer.prototype.generateRandom = function () {
        var rndMin = this.min == -Infinity ? -10 : this.min;
        var rndMax = this.max == Infinity ? 10 : this.max;
        return _.random(rndMin, rndMax);
    };
    Object.defineProperty(Integer.prototype, "range", {
        get: function () {
            return this.max - this.min;
        },
        enumerable: true,
        configurable: true
    });
    Integer.prototype.startGeneration = function () {
        return this.min;
    };
    Integer.prototype.generateOrdered = function (previous) {
        return previous == this.max ? null : previous + 1;
    };
    return Integer;
}());
module.exports = Integer;
//# sourceMappingURL=Integer.js.map