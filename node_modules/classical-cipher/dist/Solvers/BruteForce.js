"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Solver_1 = require("../Solvers/Solver");
var _ = require("lodash");
var cc = require("../index");
var BruteForce = (function (_super) {
    __extends(BruteForce, _super);
    function BruteForce() {
        _super.apply(this, arguments);
        this.name = "Brute Force";
    }
    BruteForce.prototype.rawSolve = function (args) {
        _.defaults(args.settings, {
            needToPassBenchmark: true,
            initKey: args.cipher.keyInfo.startGeneration(),
        });
        var currentKey = args.settings.initKey;
        var lowestRating = 0;
        var lowestKey;
        var rawCipherText = cc.util.unformat(args.cipherText);
        args.reporter.start(args.cipher.keyInfo.range);
        for (var i = 0; i < args.cipher.keyInfo.range; i++) {
            if (i != 0) {
                currentKey = args.cipher.keyInfo.generateOrdered(currentKey);
            }
            var newCipherText = args.cipher.rawDecrypt(rawCipherText, currentKey);
            var rating = args.stat.findStatistic(newCipherText);
            args.reporter.log("Current Key: " + currentKey + ", decrypting to " + newCipherText + ", rating: " + rating);
            if (i % 300 == 1)
                args.reporter.update(i);
            if ((rating < lowestRating == args.stat.lowerIsBetter) || lowestRating == 0) {
                lowestRating = rating;
                lowestKey = _.cloneDeep(currentKey);
            }
            if (!args.settings.useLowestValue) {
                if (rating < args.stat.significanceLevel == args.stat.lowerIsBetter) {
                    args.reporter.finish(newCipherText, currentKey, rating);
                    return {
                        text: newCipherText,
                        key: currentKey
                    };
                }
            }
        }
        if (!args.settings.useLowestValue) {
            args.reporter.error("No value was found to have the correct statistics");
        }
        args.reporter.finish(args.cipher.rawDecrypt(args.cipherText, lowestKey), lowestKey, lowestRating);
        return {
            text: args.cipher.rawDecrypt(args.cipherText, lowestKey),
            key: lowestKey
        };
    };
    return BruteForce;
}(Solver_1.Solver));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BruteForce;
//# sourceMappingURL=BruteForce.js.map