"use strict";
var InvalidKeyException_1 = require("./InvalidKeyException");
var _ = require("lodash");
function nextPermutation(array) {
    var i = array.length - 1;
    while (i > 0 && array[i - 1] >= array[i])
        i--;
    if (i <= 0)
        return [];
    var j = array.length - 1;
    while (array[j] <= array[i - 1])
        j--;
    var temp = array[i - 1];
    array[i - 1] = array[j];
    array[j] = temp;
    j = array.length - 1;
    while (i < j) {
        temp = array[i];
        array[i] = array[j];
        array[j] = temp;
        i++;
        j--;
    }
    return array;
}
exports.nextPermutation = nextPermutation;
function testKeyType(key, expectedType) {
    if (expectedType == "array") {
        if (!_.isArray(key)) {
            throw new InvalidKeyException_1.default(key, "is not an array");
        }
    }
    else if (typeof expectedType === "function") {
        if (!(key instanceof expectedType)) {
            throw new InvalidKeyException_1.default(key, "is not an instance of" + expectedType.toString());
        }
    }
    else if (typeof key !== expectedType) {
        throw new InvalidKeyException_1.default(key, "is not of type " + expectedType);
    }
    else {
        return true;
    }
}
exports.testKeyType = testKeyType;
function testUniqueArray(key) {
    if (_.uniq(key).length !== key.length) {
        throw new InvalidKeyException_1.default(key, "is not array with unique elements");
    }
}
exports.testUniqueArray = testUniqueArray;
function processKeyGeneratingValue(value) {
    if (typeof value !== "function") {
        return function (_) { return value; };
    }
    else {
        return value;
    }
}
exports.processKeyGeneratingValue = processKeyGeneratingValue;
function testNumericArrangementOfNumbers(key) {
    if (_.isArray(key) && key.every(function (el) { return typeof el == "number"; })) {
        return key;
    }
    else if (typeof key === "string") {
        return key.split("").map(function (digitStr) {
            var digit = parseInt(digitStr);
            if (isNaN(digit)) {
                throw new InvalidKeyException_1.default(key, "has an invalid digit \"" + digit + "\"");
            }
            return digit;
        });
    }
    throw new InvalidKeyException_1.default(key);
}
exports.testNumericArrangementOfNumbers = testNumericArrangementOfNumbers;
//# sourceMappingURL=keysUtils.js.map