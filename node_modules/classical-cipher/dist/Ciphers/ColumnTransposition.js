"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Cipher_1 = require("./Cipher");
var keys = require("../keys");
var cipherUtil_1 = require("./cipherUtil");
var ColumnarTransposition = (function (_super) {
    __extends(ColumnarTransposition, _super);
    function ColumnarTransposition() {
        _super.apply(this, arguments);
        this.name = "Columnar Transposition";
        this.keyInfo = new keys.NumericArrangement();
    }
    ColumnarTransposition.prototype.rawEncrypt = function (input, key) {
        var paddedText = input;
        if (input.length % key.length != 0) {
            for (var i = 0; i < key.length - (input.length % key.length); i++) {
                paddedText += "X";
            }
        }
        return cipherUtil_1.inversePermutation(key).map(function (num) {
            var column = "";
            for (var i = num; i < paddedText.length; i += key.length) {
                column += paddedText[i];
            }
            return column;
        }).join("");
    };
    ColumnarTransposition.prototype.rawDecrypt = function (input, key) {
        if (input.length % key.length != 0) {
            var inputLen = input.length;
            for (var i = 0; i < key.length - (inputLen % key.length); i++) {
                input += "X";
            }
        }
        var newGridLength = input.length / key.length;
        var newStr = "";
        key.forEach(function (el) {
            newStr += input.substr(el * newGridLength, newGridLength);
        });
        var coloums = [];
        for (var i = 0; i < newGridLength; i++) {
            coloums[i] = "";
            for (var o = i; o < newStr.length; o += newGridLength) {
                coloums[i] += newStr[o];
            }
        }
        ;
        return coloums.join("");
    };
    return ColumnarTransposition;
}(Cipher_1.Cipher));
module.exports = ColumnarTransposition;
//# sourceMappingURL=ColumnTransposition.js.map