"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _ = require("lodash");
exports.lowercaseLetters = "abcdefghijklmnopqrstuvwxyz";
exports.uppercaseLetters = exports.lowercaseLetters.toUpperCase();
exports.toLetterCode = function (letter) { return letter.charCodeAt(0) - 65; };
exports.fromLetterCode = function (num) { return String.fromCharCode(num + 65); };
function factorial(num) {
    var result = 0;
    for (var i = 1; i <= num; i++) {
        result *= i;
    }
    return result;
}
exports.factorial = factorial;
var Exception = (function (_super) {
    __extends(Exception, _super);
    function Exception(message) {
        _super.call(this, message);
        this.message = message;
        this.name = 'Exception';
        this.stack = (new Error()).stack;
    }
    Exception.prototype.toString = function () {
        return this.name + ': ' + this.message;
    };
    return Exception;
}(Error));
exports.Exception = Exception;
var NotImplementedException = (function (_super) {
    __extends(NotImplementedException, _super);
    function NotImplementedException(str) {
        if (str === void 0) { str = "Function not implemented"; }
        _super.call(this, str);
        this.name = "NotImplementedException";
    }
    return NotImplementedException;
}(Exception));
exports.NotImplementedException = NotImplementedException;
function generateUniformArray(elementToRepeat, times, deep) {
    if (deep === void 0) { deep = false; }
    var retValue = [];
    for (var i = 0; i < times; i++) {
        retValue.push(deep ? _.cloneDeep(elementToRepeat) : elementToRepeat);
    }
    return retValue;
}
exports.generateUniformArray = generateUniformArray;
function random_element(arr) {
    return arr[_.random(0, arr.length - 1)];
}
exports.random_element = random_element;
function append(arr, element) {
    if (typeof arr === "string") {
        arr += element;
        return arr;
    }
    else if (typeof arr === "object") {
        arr.push(element);
        return arr;
    }
}
exports.append = append;
function unformat(text) {
    var output = "";
    for (var i = 0; i < text.length; i++) {
        var charCode = text[i].charCodeAt(0);
        if (charCode >= 97 && charCode <= 122) {
            output += String.fromCharCode(charCode - 32);
        }
        else if (charCode >= 65 && charCode <= 90) {
            output += text[i];
        }
    }
    return output;
}
exports.unformat = unformat;
function format(text, original) {
    function testInvarient() {
        if (text[inputNumOn] === undefined) {
            throw new Error("[Cipher.format] the text \"" + text + "\" cannot be matched formatted with\n                original \"" + original + "\"");
        }
    }
    var output = "";
    var inputNumOn = 0;
    for (var i = 0; i < original.length; i++) {
        var charCode = original[i].charCodeAt(0);
        if (charCode >= 97 && charCode <= 122) {
            testInvarient();
            output += text[inputNumOn++].toLowerCase();
        }
        else if (charCode >= 65 && charCode <= 90) {
            testInvarient();
            output += text[inputNumOn++].toUpperCase();
        }
        else {
            output += original[i];
        }
    }
    return output;
}
exports.format = format;
function _throw(value) {
    throw value;
}
exports._throw = _throw;
//# sourceMappingURL=util.js.map