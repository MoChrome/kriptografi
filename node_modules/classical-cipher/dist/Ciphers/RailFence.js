"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Cipher_1 = require("./Cipher");
var keys = require("../keys");
var RailFence = (function (_super) {
    __extends(RailFence, _super);
    function RailFence() {
        _super.apply(this, arguments);
        this.name = "Rail Fence";
        this.keyInfo = new keys.Integer(2);
    }
    RailFence.prototype.rawEncrypt = function (input, key) {
        var areIncreasingLevels = true;
        var levelIndex = 0;
        var levels = [];
        for (var i = 0; i < input.length; i++) {
            if (levels[levelIndex] == undefined) {
                levels[levelIndex] = [];
            }
            levels[levelIndex].push(input[i]);
            if (areIncreasingLevels)
                levelIndex++;
            else
                levelIndex--;
            if (levelIndex == key - 1)
                areIncreasingLevels = false;
            if (levelIndex == 0)
                areIncreasingLevels = true;
        }
        var retValue = "";
        for (var i = 0; i < key; i++) {
            retValue += levels[i].join("");
        }
        return retValue;
    };
    RailFence.prototype.rawDecrypt = function (input, key) {
        var position;
        var plainText = [];
        var i = 0;
        for (var row = 0; row < key; row++) {
            position = row;
            while (position < input.length) {
                plainText[position] = input[i];
                if (row == 0 || row == key - 1 || position + (key - row - 1) * 2 >= input.length)
                    i++;
                else {
                    plainText[position + (key - row - 1) * 2] = input[i + 1];
                    i += 2;
                }
                position += key * 2 - 2;
            }
        }
        return plainText.join("");
    };
    return RailFence;
}(Cipher_1.Cipher));
module.exports = RailFence;
//# sourceMappingURL=RailFence.js.map